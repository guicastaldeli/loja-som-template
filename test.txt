TASKS:
- arrumar para quando deletar um item, deletar somente 1 no contador da quantidade total.
- arrumar para quando clicar no botão de deletar, ele delete somente 1 item de cada vez (se tiver mais de 1);

- fazer página principal do produto.
- fazer filtro de busca e filtro normal.

- fazer esquema de tentar enviar mensagem ou algo que possa notificar o dono da loja, quando clicar para comprar (mae).
- **tentar** fazer esquema de contas para armazenar os produtos, se não der, mandar mensagem por SMS ou WhatsApp com os produtos reservados.

- fazer o design do site ;P xD.

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

28/09/2024 TASKS:
- Fazer o esquema para quando clicar em reservar dentro da página de visualização do produto,
 ele entrar no carrinho, ou fazer somente uma página para visualizar o produto.

- terminar de fazer o código para enviar mensagem no celular

scr.js (ARQUIVO1):
//<Header>
const mainHeader = document.createElement('header');
mainHeader.id = '--m-h';
    //Logo (p)
    export const mainLogo = document.createElement('p');
    mainLogo.id = '-m-l';
    mainLogo.textContent = 'Logo';

    //Search input...
    export const searchInput = document.createElement('input');
    searchInput.id = '---s-i';

    //Cart (div)
    export const directDivCart = document.createElement('div');
    directDivCart.id =  '-g';
    directDivCart.textContent = '= CART'

    //Filter (brand)
        export const container = document.createElement('div');
        container.id = '---c';

        export function containerBrdFltr__(brand) {
            const containerBrdFltr = document.createElement('input');
            containerBrdFltr.type = 'radio';
            containerBrdFltr.id = '---c-b-f';
            containerBrdFltr.name = '---g-n';
            
    
            const lbBrdFltr = document.createElement('label');
            lbBrdFltr.id = '---l-b-f';
            lbBrdFltr.htmlFor = '---c-b-f';
    
            lbBrdFltr.textContent = brand.name;
    
            container.append(containerBrdFltr);
            container.append(lbBrdFltr);
        }
    //

    //hr
    const mainHr = document.createElement('hr');
    mainHr.id = '-m-hr';

//</Header>
    
    export function rdctPage() {
        mainLogo.addEventListener('click', () => {
        window.location.href = './index.html';
    })
}

export function __appendMainElements() {
    mainHeader.append(mainLogo);

    mainHeader.append(container);

    mainHeader.append(searchInput);

    mainHeader.append(directDivCart);

    mainHeader.append(mainHr);
    
    document.body.appendChild(mainHeader);
}

search-tool.js (ARQUIVO 2):
import { containerBrdFltr__, searchInput } from "./scr.js";

import { itemElements } from "./catalog.js";

//Brand list...
    async function _loadBrands() {
        try {
            const res = await fetch('./catalog.json');
            const data = await res.json();

            return data.general.brandlist.brands;
        } catch (err) {
            console.error('ERRO', err);
        }
    }
//

//Search bar...
    export async function ___searchTool() {
        //Search filter...
            searchInput.addEventListener('input', async (e) => {
                const searchTerm = e.target.value.toLowerCase();

                itemElements.forEach(itemElement => {
                    const itemName = itemElement.querySelector('#name-display--').textContent.toLowerCase();

                    if(itemName.includes(searchTerm)) {
                        itemElement.style.display = 'block';
                    } else {
                        itemElement.style.display = 'none';
                    }
                });
            });
        //

        //Radio filter...
            const brandList = await _loadBrands();

            brandList.forEach(brand => {
                containerBrdFltr__(brand);
            });

            const brandRadios = document.querySelectorAll('input[name="---g-n"]');

            brandRadios.forEach(radio => {
                radio.addEventListener('change', (e) => {
                    const selectedBrand = e.target.nextElementSibling.textContent;

                    itemElements.forEach(itemElement => {
                        const itemBrand = itemElement.getAttribute('brand-list');

                        if(itemBrand === selectedBrand) {
                            itemElement.style.display = 'block';
                        } else {
                            itemElement.style.display = 'none';
                        }
                    });
                });
            });
        //
    }
//


catalog.js (ARQUIVO 3):
async function _loadCatalog() {
    try {
        const res = await fetch('./catalog.json');
        const data = await res.json();
        
        return data.general.catalog;
    } catch (err) {
        console.error('ERRO', err)
    }
}

export const itemElements = [];

export async function __showCatalog() {
    const catalog = await _loadCatalog();

    if(catalog) {
        const container = document.getElementById('catalog-list');

        Object.keys(catalog).forEach(key => {
            const items = catalog[key];

            items.forEach((item) => {
                const itemElement = createItemElmt__(item);
                itemElements.push(itemElement);
                
                container.append(itemElement);
            });
        });
    } else {
        console.error("err!")
    }
}

// --------------------------- CATALOG LIST ---------------------------
    function createItemElmt__(item) {
        const itemElement = document.createElement('div');
        itemElement.id = 'item-element--';

        if(typeof item === 'object' && item !== null) {
            //Photo display...
                const photoDisplay = document.createElement('img');
                photoDisplay.id = 'photo-display--';
                photoDisplay.src = item.photo;
            //

            //Name display...
                const nameDisplay = document.createElement('h3');
                nameDisplay.id = 'name-display--';
                nameDisplay.textContent = item.name;
            //

            //Price display...
                const priceDisplay = document.createElement('h3');
                priceDisplay.id = 'price-display--';
                priceDisplay.textContent = item.price;
            //

            //Add to Cart button...
                const addCartBtn = document.createElement('button');
                addCartBtn.id = 'add-cart-btn--';
                addCartBtn.textContent = 'Add';
            //

            //------ Appends ------
                itemElement.append(photoDisplay);
                itemElement.append(nameDisplay);
                itemElement.append(priceDisplay);

                itemElement.append(addCartBtn);
            //

            //------ Redirect to product page...
                function __rdctPrdctPage(e) {
                    if(e.target === addCartBtn) {
                        e.stopPropagation();

                        indexItemsCart__();
                        addToCart__(item);

                        return;
                    }

                    localStorage.setItem('selectedProduct', JSON.stringify(item));
                    window.location.href = './product-page-scripts/product-page.html';
                }
            //

            //Execs...
            itemElement.addEventListener('click', __rdctPrdctPage);
            addCartBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                addToCart__(item);
            });
        }
        return itemElement;
    }
// ------------------------------------------------------------

// --------------------------- CART --------------------------- 
    export function indexItemsCart__() {
        const cartItems = JSON.parse(localStorage.getItem('cart-items')) || [];
        const container = document.createElement('div');

        //Empty cart...
            function emptyCartMsg_() {
                const emptyMsg = document.createElement('h1');
                emptyMsg.textContent = 'Carrinho Vazio';

                container.append(emptyMsg);

                return emptyMsg;
            }

            if(cartItems.length === 0) {
                const emptyMsg = emptyCartMsg_();

                return emptyMsg;
            }
        //
        
        //Create card for cart items...
            //Info texts...
                const quantityText = 'Quantidade: ';
                const totalPriceText = 'Total: ';

                const hmPriceTxt = document.createElement('p');
                hmPriceTxt.id = 'h-m-p--';
                hmPriceTxt.textContent = `${totalPriceText} ${calcTotal_(cartItems)}`;

                const hmPrdctsTxt = document.createElement('p');
                hmPrdctsTxt.id = 'h-m-prdcts--';
                hmPrdctsTxt.textContent = `Quantidade Total: ${cartItems.length}`;

                const reserveItem = document.createElement('button');
                reserveItem.textContent = 'Reservar';

                //Append texts...
                    container.append(hmPriceTxt);
                    container.append(hmPrdctsTxt);

                    container.append(reserveItem);
                //
            //

            //Reserve products...
                function __reservePrdcts() {
                    window.location.href = './reserve-page-scripts/reserve-page.html';
                }

                //Append
                    reserveItem.addEventListener('click', __reservePrdcts);
                //
            //

            const cartItemsElmts = cartItems.map(item => {
                const indexCartItem = document.createElement('div');
                indexCartItem.id = 'i-c-i--';
                
                //Cart container...
                    const photoCartItem = document.createElement('img');
                    photoCartItem.src = item.photo;

                    const nameCartItem = document.createElement('h1');
                    nameCartItem.textContent = `${item.name}`;

                    const priceCartItem = document.createElement('h1');
                    priceCartItem.textContent = item.price;

                    const quantityCartItem = document.createElement('p');
                    quantityCartItem.textContent = `${quantityText} ${item.quantity}`;

                    const deleteBtn = document.createElement('button');
                    deleteBtn.textContent = 'x';

                    //Increase && Decrease
                        const increaseBtn = document.createElement('button');
                        increaseBtn.textContent = '+';

                        const decreaseBtn = document.createElement('button');
                        decreaseBtn.textContent = '-';
                    //
                //

                //Add Items...
                    function increaseItems_(item) {
                        const cartItems = JSON.parse(localStorage.getItem('cart-items')) || [];
                        const existItem = cartItems.find(cartItem => cartItem.name === item.name);

                        if(existItem) {
                            existItem.quantity += 1;
    
                            quantityCartItem.textContent = `${quantityText} ${existItem.quantity}`;
                            hmPriceTxt.textContent = `${totalPriceText} ${calcTotal_(cartItems)}`;

                            //Disable & enable button stock...
                            if(existItem.quantity === item.stquantity) {
                                increaseBtn.disabled = true;
                            }

                            if(existItem.quantity > 1) {
                                decreaseBtn.disabled = false;
                            }
                        } else {
                            cartItems.push({ ...item, quantity: 1 });
                        }

                        localStorage.setItem('cart-items', JSON.stringify(cartItems));
                    }
                //

                //Delete Items...
                    //Delete 1...
                        function decreaseItems_() {
                            const cartItems = JSON.parse(localStorage.getItem('cart-items')) || [];
                            const existItem = cartItems.find(cartItem => cartItem.name === item.name);

                            if(existItem && existItem.quantity > 1) {
                                existItem.quantity -= 1;

                                quantityCartItem.textContent = `${quantityText} ${existItem.quantity}`;
                                hmPriceTxt.textContent = `${totalPriceText} ${calcTotal_(cartItems)}`;

                                if(existItem && existItem.quantity === 1) {
                                    decreaseBtn.disabled = true;
                                }

                                //Enable button stock...
                                if(existItem.quantity < item.stquantity) {
                                    increaseBtn.disabled = false;
                                }
                            } else if(existItem && existItem.quantity === 1) {
                                decreaseBtn.disabled = true;
                            }

                            localStorage.setItem('cart-items', JSON.stringify(cartItems));
                        }
                    //

                    //Delete all...
                        function deleteItems_() {
                            const upCartItems = cartItems.filter(cartItem => 
                                        cartItem.name !== item.name || 
                                        (cartItem.name === item.name && item !== cartItem
                                    )
                                )
                            ;
                
                            localStorage.setItem('cart-items', JSON.stringify(upCartItems));

                            hmPrdctsTxt.textContent = `${quantityText} ${upCartItems.length}`;
                            hmPriceTxt.textContent = `${totalPriceText} ${calcTotal_(upCartItems)}`;
                            
                            
                            if(upCartItems.length === 0) {
                                const emptyMsg = emptyCartMsg_();

                                indexCartItem.remove();
                                hmPrdctsTxt.remove();
                                hmPriceTxt.remove();
                                reserveItem.remove();

                                return emptyMsg;
                            }
                        }
                    //
                //

                //Verify item quantity...
                    if(item.quantity === item.stquantity) {
                        increaseBtn.disabled = true;
                    }

                    if(item.quantity === 1) {
                        decreaseBtn.disabled = true;
                    }
                //
                
                //Appends
                    increaseBtn.addEventListener('click', (e) => increaseItems_(item));
                    decreaseBtn.addEventListener('click', decreaseItems_);

                    deleteBtn.addEventListener('click', deleteItems_);
                //

                //Append to index cart item...
                    indexCartItem.append(photoCartItem);
                    indexCartItem.append(nameCartItem);
                    indexCartItem.append(priceCartItem);
                    indexCartItem.append(quantityCartItem);

                    indexCartItem.append(increaseBtn);
                    indexCartItem.append(decreaseBtn);

                    indexCartItem.append(deleteBtn);
                //

                //Append to cart div...
                return indexCartItem;
            });
        //

        cartItemsElmts.forEach(itemElement => container.append(itemElement));

        return container;
    }
// ------------------------------------------------------------ 

//Calculate total price...
    export function calcTotal_(cartItems) {
        const totalPrc = cartItems.reduce((total, item) => {
            return total + (parseFloat(item.price) * (item.quantity || 1))
        }, 0);

        //Return numbers...
        return totalPrc.toLocaleString('pt-BR', 
            { minimumFractionDigits: 2, 
                maximumFractionDigits: 2
            }
        );
    }
//

//Add to cart
    export function addToCart__(item) {
        const cartItems = JSON.parse(localStorage.getItem('cart-items')) || [];
        const existItem = cartItems.find(cartItem => cartItem.name === item.name);

        if(existItem) {
            existItem.quantity = existItem.quantity || 1;
        } else {
            cartItems.push({...item, quantity: 1, stquantity: item.stquantity});
        }

        localStorage.setItem('cart-items', JSON.stringify(cartItems));
    }
//

catalog.json (ARQUIVO 4):
{
    "general": {
        "brandlist": {
            "brands": [
                { "name": "PIONEER"},
                { "name": "BRAVOX" },
                { "name": "JBL" },
                { "name": "LESON" }
            ]
        },
        "catalog": {
            "speakers": [
                { "id": "001", "brand": "PIONEER", "photo": "/assets/img/1.png", "name": "PIONEER TS-1360BR", "price": "999.99", "stquantity": 5 },
                { "id": "002", "brand": "JBL", "photo": "/assets/img/2.png", "name": "JBL Flex 6p", "price": "999.99", "stquantity": 8},
                { "id": "003", "brand": "LESON", "photo": "/assets/img/3.png","name": "LE SON Alto Falante 6 Polegadas LS6", "price": "999.99", "stquantity": 2 },
                { "id": "004", "brand": "BRAVOX", "photo": "/assets/img/4.png", "name": "BRAVOX Alto-Falante Triaxial Bravox 5", "price": "999.99", "stquantity": 3 },
                { "id": "005", "brand": "PIONEER", "photo": "/assets/img/5.png" ,"name": "PIONEER TS-1790BR", "price": "999.99", "stquantity": 9 }
            ],
            "modules": [
                { "photo": "/assets/img/1a.png", "name": "Stetsom Vulcan 8000w 2 ohm", "price": "999.99", "stquantity": 15 }
            ]
        }
    }
}

function sendMsg__() {
                if(inputNumber.value && inputName.value) {
                    const itemNames = cartItems.map(cartItem => cartItem.name).join(', ');
    
                    if(cartItems.length === 1) {
                        alert(`O item ${itemNames} foi reservado`);
                    } else {
                        alert(`Os itens ${itemNames} foram reservados!!`)
                    }
                } else {
                    alert('Insira suas informações!')
                }
            }

/* ------ Execs... ------ */
@import './other-styles/catalog.scss';
@import './other-styles/main-page.scss';
@import './other-styles/product-page.scss';
@import './other-styles/reserve-page.scss';
/* ---------------------- */

$colorBg: red;

#item-element-- {
    #name-display-- {
        color: $colorBg;

        &:hover {
            color: blue;
            cursor: pointer;
        }
    }
}
